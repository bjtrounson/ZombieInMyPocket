@startuml
skinparam groupInheritance 2
' Split into 4 pages
page 2x2
skinparam pageMargin 10
skinparam pageExternalColor gray
skinparam pageBorderColor black

together {
    class Commands {
        #_game : Game
        #_card_manager : CardManager
        #_pickle_manager : PickleManager
        #_file_manager : FileManager
        #_game_options : GameOptions
        __init__(self)
        +preloop(self) -> None
        +do_game_info(self, args) -> None
        +do_next_turn(self, args) -> None
        +do_cower(self, args) -> None
        +do_save_game_options(self, file_name: str) -> None
        +do_load_game_options(self, file_name: str) -> None
        +do_save_game(self, file_name: str) -> None
        +do_load_game(self, file_name: str) -> None
        +help_game_info(self) -> None
        +help_next_turn(self) -> None
        +help_cower(self) -> None
        +help_save_game_options(self) -> None
        +help_load_game_options(self) -> None
        +help_save_game(self) -> None
        +help_load_game(self) -> None
        +do_EOF(self, line)
    }

    class GameOptions {
        player_health : int
        player_damage : int
        player_item_limit : int
        game_start_time : int
        game_end_time : int
    }

    class Parser {
        args = str
        parser: ArgumentParser
        __init__(self)
        +add_args(self) -> None
    }

    class PickleManager {
        #_current_dir
        __init__(self, cwd: str)
        +serialize_object_to_file(self, file_name: str, obj: Game) -> None
        +deserialize_file_to_object(self, file_name: str) -> Game
        +remove_save(self, file_name: str) -> None
        +get_current_dir(self) -> str
    }

    class FileManager {
        #_current_dir
        __init__(self, cwd: str)
        +serialize_game_options_to_json(self, file_name: str, game_options: GameOptions) -> None
        +deserialize_json_to_game_options(self, file_name: str) -> GameOptions
        +extract_intro_text(self) -> str
    }

    class Game {
        #_time: int
        #_end_time: int
        #_inside_tiles: list[Tile]
        #_outside_tiles: list[Tile]
        #_dev_cards: list[Card]
        #_current_dev_card: Card | None
        #_card_manager: CardManager
        #_level: Level
        __init__(self, start_time: int, end_time: int, level: Level)
        +setup() -> None
        +{static} shuffle_decks(deck: list[Card | Tile]) -> list[Card | Tile]
        +draw_tile(self) -> Tile
        +setup_dev_cards(self) -> None
        +draw_dev_card(self) -> None
        +move(self, entry_door: Door, exit_door: Door, new_tile: Tile) -> None
        +movement_algorithm(self, player_pos_x: float, player_pos_y: float, new_tile: Tile, exit_door: Door) -> Any
        +create_zombie_door(self, tile: Tile, exit_door: Door) -> None
        +{static}correct_tile_rotation(correct_door_position: TilePosition, new_tile: Tile, exit_door: Door) -> Tile
        +{static}get_tile_doors(tile: Tile) -> list[Door]
        +tile_algorithm(self, new_tile: Tile) -> bool
        #_get_index_of_tile(self, target_tile: Tile) -> int
        +pickup_item(self, item: Item) -> Any
        +replace_item(self, item: Item) -> Any
        +available_replaceable_items(self) -> Item
        +attack(self, zombie_count: int, attack_score: int) -> None
        +cower(self) -> None
        +activate_time_action(self, card: Card) -> None
        #_bad_time_behaviour(self, time_behaviour: AbstractTimeBehaviour) -> Any
        +runaway(self) -> None
        +{static}runaway_tile_input() -> int
        +player_run_away_tiles_available(self) -> list[Tile]
        +get_door_from_input(self, tile: Tile, new_tile: bool) -> Door
        +get_current_tile(self) -> Tile
        +get_current_dev_card(self) -> Card
        +get_player_from_level(self) -> Player
        +set_game_start_time(self, start_time: int) -> None
        +set_game_end_time(self, end_time: int) -> None
    }

    class Player {
        #_health: int
        #_attack: int
        #_item_limit: int
        #_player_items: list[Item]
        #_inside: bool
        #_x: float
        #_y: float
        __init__(self, health: int, attack: int, item_limit: int, player_items: list[Item], x: float, y: float)
        +get_x(self) -> float
        +get_y(self) -> float
        +get_health(self) -> int
        +get_is_inside(self) -> bool
        +get_attack_score(self) -> int
        +get_items(self) -> list[Item]:
        +set_health(self) -> None
        +add_item(self, item: Item) -> None
        +replace_item(self, item_to_replace: Item, item: Item) -> None
        +set_attack_score(self, attack_score: int) -> None
        +set_item_limit(self, item_limit: int) -> None
        +set_player_pos(self, x: float, y: float) -> None
    }

    package level <<Folder>> #DDDDDD {
        class Level {
            #_tiles : list[Tile]
            #_player : Player
            __init__(self, tiles: list[Tile], player: Player)
            +add_new_tile(self, tile: Tile) -> None
            +check_if_tile_already_exists(self, x: float, y: float) -> bool
            +check_if_door_exist_near_cords(self, x: float, y: float) -> bool
            +get_available_doors(self, tile: Tile) -> list[Door]
            +{static}get_walls_on_tile(tile: Tile) -> list[Wall]
            +{static}get_door_info_on_tile(tile: Tile) -> [dict[int, TilePosition]]
            +get_tile_player_is_on(self) -> Tile
            +get_tile_by_cords(self, x: float, y: float) -> Tile | bool
            +get_tile_count(self) -> int
            +get_player(self) -> Player
        }
    }
}





package tiles <<Folder>> #DDDDDD {
    class Tile {
        +tile_name : str
        +tile_type : TileType
        +tile_behaviour : AbstractTileBehaviour
        #_tile_sides : list[AbstractTileSide]
        #_x : float
        #_y : float
        __init__(self, tile_type: TileType, x: float, y: float)
        #_change_tile_side(self, tile_position: TilePosition, side) -> None
        +rotate_tile(self, rotation_direction: RotationDirection) -> None
        +get_door_index_from_position(self, door_position: int) -> int
        +get_side_from_index(self, index: int) -> AbstractTileSide
        +get_x(self) -> float
        +get_y(self) -> float
        +set_pos(self, x: float, y: float) -> None
        +get_tile_sides(self) -> list[AbstractTileSide]
        __eq__(self, other) -> bool
    }

    enum RotationDirection {
        Right,
        Left
    }

    enum TilePosition {
        North = 0
        East = 1
        South = 2
        West = 3
    }

    enum TileType {
        Foyer,
        Bedroom,
        DiningRoom,
        Bathroom,
        Kitchen,
        Storage,
        EvilTemple,
        Patio,
        Yard1,
        Yard2,
        Yard3,
        Garage,
        SittingArea,
        Garden,
        Graveyard
    }

    class Door extends AbstractTileSide {
        __init__(self, tile_side: TilePosition)
    }

    class Wall extends AbstractTileSide {
        __init__(self, tile_side: TilePosition)
    }

    abstract class AbstractTileSide {
        +original_tile_side : TilePosition
        __init__(self, tile_side: TilePosition)
        +get_tile_side(self) -> TilePosition
        __eq__(self, other) -> bool
    }

    abstract class AbstractTileBehaviour {
        +{abstract} action(self)
    }

    class EvilTempleBehaviour extends AbstractTileBehaviour {
        +action(self) -> Item
    }

    class GraveyardBehaviour extends AbstractTileBehaviour {
        +action(self) -> str
    }

    class GardenBehaviour extends AbstractTileBehaviour {
        +action(self) -> int
    }

    class KitchenBehaviour extends AbstractTileBehaviour {
        +action(self) -> int
    }

    class StorageBehavior extends AbstractTileBehaviour {
        +action(self) -> str
    }

    class DefaultBehaviour extends AbstractTileBehaviour {
        +action(self) -> None
    }


}

package items <<Folder>> #DDDDDD {
    class Item {
        +item_name : str
        +primary_item_behaviour : AbstractItemBehaviour
        +optional_item_behaviour : AbstractItemBehaviour
        +combo_item : ItemType | None
        +second_combo_item : ItemType | None
        +uses : int | None
        +item_type : ItemType
        __init__(self, item_type: ItemType)
        +action(self) -> AbstractItemBehaviour
    }

    enum ItemType {
        Oil,
        Gasoline,
        BoardWNail,
        CanOfSoda,
        GrislyFemur,
        GolfClub,
        Candle,
        Chainsaw,
        Machete
    }

    abstract class AbstractItemBehaviour {
        +{abstract} action(self)
    }

    class NegativeItemBehaviour extends AbstractItemBehaviour {
        +damage : int
        __init__(self, damage: int)
        +action(self) -> int
    }

    class PassiveItemBehaviour extends AbstractItemBehaviour {
        +action(self) -> None
    }

    class PositiveItemBehaviour extends AbstractItemBehaviour {
        +health : int
        __init__(self, health: int)
        +action(self) -> int
    }
}

package cards <<Folder>> #DDDDDD {
    class Card {
        +time_actions : list[TimeAction]
        __init__(self, time_actions: list[TimeAction])
        +get_time_action(self, time: int) -> TimeAction
    }

    class CardManager {
        #_card_deck : list[Card]
        __init__(self)
        +add_card(self, item: ItemType) -> None
        +add_all_cards(self) -> None
        +get_deck(self) -> list[Card]
    }

    class TimeAction {
        +time : int
        +time_behaviour : AbstractTimeBehaviour
        __init__(self, time: int, time_behaviour: AbstractTimeBehaviour)
        __eq__(self, other) -> bool
    }

    abstract class AbstractTimeBehaviour {
        +message : str
        __init__(self, message: str)
        {abstract}+action(self)
    }

    class GoodTimeBehaviour extends AbstractTimeBehaviour {
        +health : int
        __init__(self, message: str, health: int)
        +action(self) -> int
    }

    class BadTimeBehaviour extends AbstractTimeBehaviour {
        +damage : int
        __init__(self, message: str, damage: int)
        +action(self) -> int
    }

    class NeutralTimeBehaviour extends AbstractTimeBehaviour {
        __init__(self, message: str)
        +action(self) -> str
    }


}

Main *-- Commands
Commands *-- Game
Commands *-- CardManager
Commands *-- PickleManager
Commands *-- Parser
Commands *-- Player
Commands *-- FileManager
Commands *-- GameOptions
FileManager *-- GameOptions
Game *-- Player
Game *-- Card
Game *-- Tile
Game *-- Level
Game *-- TilePosition
Game *-- Door
Player *-- Item
Level *-- Tile
Level *-- TilePosition
Level *-- Player
Tile *-- AbstractTileBehaviour
Tile *-- TileType
Tile *-- AbstractTileSide
Tile *-- RotationDirection
Tile *-- TilePosition
AbstractTileSide *-- TilePosition
Door *- TilePosition
Wall *- TilePosition
EvilTempleBehaviour *-- Item
CardManager *- Card
CardManager *-- ItemType
Card *-- TimeAction
TimeAction *-- AbstractTimeBehaviour
Item *-- AbstractItemBehaviour
Item *-- ItemType
@enduml