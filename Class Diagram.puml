@startuml Class Diagram
skinparam groupInheritance 3

class Game {
    Integer time
    Player player
    Tile[] outdoor_tiles
    Tile[] indoor_tiles
    Card[] dev_cards
    Card[] current_dev_cards
    void setup()
    void shuffle(cards: Card[])
    void move(move_direction: MoveType)
    void pickup_item()
    void attack(zombie_count: Integer, attack_score: Integer)
    void cower()
}

class Player {
    Integer health
    Integer attack
    Item[] player_items
    void __init__(self, health, attack, player_items)
}

enum MoveType {
    NextRoom
    PreviousRoom
}

Game *-- Player
Game *-- Card
Game *-- Tile
Game *-- MoveType
Player *-- Item

package tiles <<Folder>> #DDDDDD {
    class Tile {
        String tile_name
        AbstractTileBehaviour tile_behaviour
    }

    abstract class AbstractTileBehaviour {
        void action()
    }

    class EvilTempleBehaviour extends AbstractTileBehaviour {
        void action()
    }

    class GraveyardBehaviour extends AbstractTileBehaviour {
        void action()
    }

    class GardenBehaviour extends AbstractTileBehaviour {
        void action()
    }

    class KitchenBehaviour extends AbstractTileBehaviour {
        void action()
    }

    class DefaultBehaviour extends AbstractTileBehaviour {
        void action()
    }

    Tile *-- AbstractTileBehaviour
}

package items <<Folder>> #DDDDDD {
    class Item {
        String item_name
        AbstractItemBehaviour item_behaviour
        void __init__(self)
    }

    abstract class AbstractItemBehaviour {
        void action()
    }

    class NegativeItemBehaviour extends AbstractItemBehaviour {
        void action()
    }

    class PassiveItemBehaviour extends AbstractItemBehaviour {
        void action()
    }

    class PositiveItemBehaviour extends AbstractItemBehaviour {
        void action()
    }

    Item *-- AbstractItemBehaviour
}

package cards <<Folder>> #DDDDDD {
    class Card {
        TimeAction[] time_actions
    }

    class TimeAction {
        time : int
        time_behaviour : AbstractTimeBehaviour
        __init__(self, time: int, time_behaviour: AbstractTimeBehaviour)
    }

    abstract class AbstractTimeBehaviour {
        message : str
        __init__(self, message: str)
        action()
    }

    class GoodTimeBehaviour extends AbstractTimeBehaviour {
        health : int
        __init__(self, message: str, health: int)
        action() -> int
    }

    class BadTimeBehaviour extends AbstractTimeBehaviour {
        damage : int
        __init__(self, message: str, damage: int)
        action() -> int
    }

    class NeutralTimeBehaviour extends AbstractTimeBehaviour {
        __init__(self, message: str)
        action() -> str
    }

    Card *-- TimeAction
    TimeAction *-- AbstractTimeBehaviour
}

@enduml